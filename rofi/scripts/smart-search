#!/usr/bin/env bash
DIR=~/org
MOVIE_DIR=/mnt/shared/movie
BOOKMARK_FILE="$HOME/.config/rofi/scripts/.bookmarks"

touch "$BOOKMARK_FILE"

# Function to prompt user for the folder choice
choose_search() {
  echo -e "web\nbooks\ncollege\nscreenshot\nmovie" | rofi -dmenu -i -matching normal -no-custom -location 0 -p "Select search " -theme ~/.config/rofi/horizon.rasi
}

# Associative array for storing assets
declare -A ASSET

# Add elements to ASSET array
get_assets() {
  readarray -t F_ARRAY <<<"$(find "$ASSET_DIR" -type f)"

  if [[ -n ${F_ARRAY[*]} ]]; then
    for i in "${!F_ARRAY[@]}"; do
      path="${F_ARRAY[$i]}"
      file=$(basename "${F_ARRAY[$i]}")
      ASSET+=(["$file"]="$path")
    done
  else
    echo "$ASSET_DIR is empty!"
    echo "Please put some files in it."
    exit
  fi
}

# List for rofi
gen_list() {
  for i in "${!ASSET[@]}"; do
    echo "$i"
  done
}

#List for screenshot
get_options() {
  echo "  Capture Region"
  echo "  Capture Screen in 3sec"
  echo "  Capture Active"
  echo "  Record Screen  MP4"
  echo "  Record Region  GIF"
  echo "  Record Region  MP4"
  echo "  Record Screen  GIF(pls no)" # very costly
}

main() {
  stype=$(choose_search)
  if [[ "$stype" == "screenshot" ]]; then
    choice=$( (get_options) | rofi -dmenu -i -fuzzy -p " " -theme ~/.config/rofi/horizon.rasi)
    case $choice in
    '  Capture Region')
      screenshot.sh --sel
      ;;
    '  Capture Screen in 3sec')
      screenshot.sh --in 3
      ;;
    '  Capture Active')
      screenshot.sh --active
      ;;
    '  Record Region  GIF')
      screenshot.sh --record-sel-gif
      ;;
    '  Record Screen  GIF')
      screenshot.sh --record-gif
      ;;
    '  Record Region  MP4')
      screenshot.sh --record-sel
      ;;
    '  Record Screen  MP4')
      screenshot.sh --record
      ;;
    esac
  elif [[ "$stype" == "web" ]]; then
    query=$( (echo) | rofi -dmenu -i -lines 0 -matching fuzzy -location 0 -p " " -input "$BOOKMARK_FILE" -theme ~/.config/rofi/horizon.rasi)
    if [[ -n "$query" ]]; then
      # If the query is a URL, open it directly
      if [[ "$query" == "http"* || "$query" == "www"* ]]; then
        xdg-open "$query"
      else
        # Construct DuckDuckGo search URL
        url="https://www.duckduckgo.com/?q=$query"
        # Open the URL using qutebrowser (faster than firefox for at the moment searches)
        qutebrowser "$url"
      fi
    else
      echo "no url"
    fi
  elif [[ "$stype" == "books" || "$stype" == "college" ]]; then
    ASSET_DIR="$DIR/$stype"
    get_assets
    asset=$( (gen_list) | rofi -dmenu -i -matching normal -no-custom -location 0 -p " " -theme ~/.config/rofi/horizon.rasi)
    if [ -n "$asset" ]; then
      xdg-open "${ASSET[$asset]}"
    fi
  elif [[ "$stype" == "movie" ]]; then
    ASSET_DIR=$MOVIE_DIR
    get_assets
    asset=$( (gen_list) | rofi -dmenu -i -matching normal -no-custom -location 0 -p " " -theme ~/.config/rofi/horizon.rasi)
    if [ -n "$asset" ]; then
      mpv "${ASSET[$asset]}"
    fi
  else
    echo "none selected"
  fi
}

main

exit 0
